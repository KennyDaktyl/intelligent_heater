import os
import time
import logging
import pytz
from datetime import datetime
from db_connector import get_latest_power_value_with_timestamp
from gpio_controller import setup_gpio, turn_on, turn_off, cleanup_gpio
from config import CHECK_INTERVAL, POWER_THRESHOLD
from utils import setup_logging, send_email_with_logs, get_current_time, warsaw_tz

def main():
    setup_gpio()
    setup_logging()

    device_state = False  # False = wy≈ÇƒÖczone, True = w≈ÇƒÖczone
    last_email_sent_date = None  # Przechowuje datƒô ostatniej wysy≈Çki e-maila
    work_sessions = []  # Przechowuje sesje pracy urzƒÖdzenia

    try:
        while True:
            setup_logging()  # Aktualizacja logowania je≈õli zmieni≈Ç siƒô dzie≈Ñ
            
            now = get_current_time()  # Pobieramy aktualny czas (zawiera strefƒô czasowƒÖ)

            # üì¨ **Sprawdzenie, czy jest po 22:00 i czy e-mail zosta≈Ç ju≈º wys≈Çany dzi≈õ**
            if now.hour >= 22 and (last_email_sent_date is None or last_email_sent_date < now.date()):
                logging.info("üì© Wysy≈Çam logi i zestawienie czasu pracy urzƒÖdzenia.")

                summary = "\n".join([f"W≈ÇƒÖczona od {start.strftime('%H:%M')} do {end.strftime('%H:%M')}" for start, end in work_sessions])
                email_body = f"Zestawienie czasowe pracy grza≈Çki:\n{summary}"
                send_email_with_logs(email_body)  # Mo≈ºna dodaƒá obs≈Çugƒô czasu pracy
                last_email_sent_date = now.date()  # Zapisujemy datƒô wys≈Çania e-maila
                work_sessions.clear()

            result = get_latest_power_value_with_timestamp()
                    
            if result:
                power, timestamp = result

                # ‚úÖ KONWERSJA TIMESTAMPU (je≈õli jest bez strefy czasowej)
                if timestamp.tzinfo is None:
                    timestamp = warsaw_tz.localize(timestamp)  # Poprawnie lokalizujemy czas

                now = get_current_time()  # Aktualizujemy czas po konwersji
                age_seconds = (now - timestamp).total_seconds()  # Teraz oba czasy sƒÖ `aware`

                # Sprawdzanie przestarza≈Çych danych
                if power is None:
                    if device_state:  # Je≈õli urzƒÖdzenie by≈Ço w≈ÇƒÖczone, loguj i wy≈ÇƒÖcz
                        logging.error(f"‚ö†Ô∏è AWARIA: Brak warto≈õci `current_power`. Ostatni wpis: {timestamp.strftime('%Y-%m-%d %H:%M:%S')}). WY≈ÅƒÑCZANIE urzƒÖdzenia.")
                        turn_off()
                        device_state = False
                        
                    time.sleep(CHECK_INTERVAL)
                    continue

                if age_seconds > 181:
                    if device_state:
                        logging.error(f"‚ö†Ô∏è AWARIA: Przestarza≈Çy wpis ({timestamp.strftime('%Y-%m-%d %H:%M:%S')}), {age_seconds:.0f} sekund temu). WY≈ÅƒÑCZANIE urzƒÖdzenia.")
                        turn_off()
                        device_state = False
                        work_sessions.append([timestamp, None]) 
                    time.sleep(CHECK_INTERVAL)
                    continue

                # Logowanie warto≈õci mocy
                logging.info(f"üîç Odczytana moc: {power} kW (timestamp: {timestamp.strftime('%Y-%m-%d %H:%M:%S')}))")

                # Decyzja o zmianie stanu urzƒÖdzenia
                if power > POWER_THRESHOLD and not device_state:
                    logging.info("‚ö° Moc przekracza pr√≥g - W≈ÅƒÑCZANIE urzƒÖdzenia.")
                    turn_on()
                    device_state = True
                    work_sessions.append([timestamp, None])

                elif power <= POWER_THRESHOLD and device_state:
                    logging.info("üîª Moc spad≈Ça poni≈ºej progu - WY≈ÅƒÑCZANIE urzƒÖdzenia.")
                    turn_off()
                    device_state = False
                    if work_sessions and work_sessions[-1][1] is None:
                        work_sessions[-1][1] = timestamp

            else:
                if device_state:
                    logging.error("üö® AWARIA: Nie uda≈Ço siƒô pobraƒá danych z bazy. WY≈ÅƒÑCZANIE urzƒÖdzenia.")
                    turn_off()
                    device_state = False

            time.sleep(CHECK_INTERVAL)
    except KeyboardInterrupt:
        logging.info("üõë Program zatrzymany przez u≈ºytkownika.")
    finally:
        cleanup_gpio()
        logging.info("üßπ GPIO wyczyszczone.")

if __name__ == "__main__":
    main()
